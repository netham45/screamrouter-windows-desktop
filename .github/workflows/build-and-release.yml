name: Build and Release

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write  # Needed for creating releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Need full history for commit details
        submodules: true  # Fetch Git submodules
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore ScreamRouterDesktop/ScreamRouterDesktop.csproj
    
    - name: Build
      run: dotnet build ScreamRouterDesktop/ScreamRouterDesktop.csproj --configuration Release --no-restore

    - name: Install Build Tools
      run: |
        choco install windows-sdk-10-version-2004-all
        choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64"
        
    - name: Build ScreamSender
      run: |
        msbuild windows-scream-sender/ScreamSender.sln /p:Configuration=Release /p:Platform=x64
        
    - name: Build ScreamReceiver
      run: |
        msbuild windows-scream-receiver/ScreamReceiver.sln /p:Configuration=Release /p:Platform=x64

    - name: Install Certificate
      run: |
        echo "${{ secrets.SCREAMROUTER_DESKTOP_PFX_B64 }}" | base64 --decode > certificate.pfx
      shell: bash
        
    - name: Sign Application
      run: |
        $files = @(
          "ScreamRouterDesktop/bin/Release/net8.0-windows/ScreamRouterDesktop.exe",
          "ScreamRouterDesktop/bin/Release/net8.0-windows/ScreamRouterDesktop.dll",
          "windows-scream-sender/x64/Release/ScreamSender.exe",
          "windows-scream-receiver/x64/Release/ScreamReceiver.exe"
        )
        
        foreach ($file in $files) {
          # Sign with SHA1 for legacy compatibility
          Start-Process -FilePath "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe" -ArgumentList "sign", "/f", "certificate.pfx", "/v", "/fd", "SHA1", "/tr", "http://timestamp.digicert.com", "/td", "SHA1", $file -NoNewWindow -Wait
          # Sign with SHA256
          Start-Process -FilePath "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe" -ArgumentList "sign", "/f", "certificate.pfx", "/v", "/fd", "SHA256", "/tr", "http://timestamp.digicert.com", "/td", "SHA256", "/as", $file -NoNewWindow -Wait
        }
    
    - name: Get short commit hash
      id: commit
      shell: bash
      run: echo "shortcode=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    
    - name: Create release artifacts directory
      run: mkdir release-artifacts
    
    - name: Copy release files
      run: |
        Copy-Item ScreamRouterDesktop/bin/Release/net8.0-windows/* -Destination release-artifacts/ -Recurse
        Copy-Item windows-scream-sender/x64/Release/ScreamSender.exe -Destination release-artifacts/
        Copy-Item windows-scream-receiver/x64/Release/ScreamReceiver.exe -Destination release-artifacts/

    - name: Create ZIP archive
      run: |
        Compress-Archive -Path release-artifacts/* -DestinationPath ScreamRouterDesktop-${{ steps.commit.outputs.shortcode }}.zip
    
    # Install WiX Toolset for MSI creation
    - name: Install WiX Toolset
      run: |
        dotnet tool install --global wix --version 5.0.0
        wix extension add WixToolset.UI.wixext/5.0.0 -g
        wix extension add WixToolset.Util.wixext/5.0.0 -g
    
    # Prepare for MSI creation
    - name: Copy WiX files to release-artifacts
      run: |
        Copy-Item ScreamRouterDesktop/installer/ScreamRouterDesktop.wxs -Destination release-artifacts/installer.wxs
        Copy-Item ScreamRouterDesktop/License.rtf -Destination release-artifacts/
    
    # Build MSI
    - name: Build MSI Installer
      working-directory: release-artifacts
      run: |
        # Use a WiX-compatible version format (must be numeric only for the 4th part)
        $buildNumber = 1  # Use a fixed number instead of commit hash
        
        # Update version number
        (Get-Content -Path installer.wxs) -replace 'Version="1.0.0.0"', "Version=`"1.0.0.$buildNumber`"" | Set-Content -Path installer.wxs
        
        # Build the MSI
        wix build -ext WixToolset.UI.wixext -ext WixToolset.Util.wixext -o ScreamRouterDesktop-${{ steps.commit.outputs.shortcode }}.msi installer.wxs
        
        # Sign the MSI
        Start-Process -FilePath "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe" -ArgumentList "sign", "/f", "../certificate.pfx", "/v", "/fd", "SHA1", "/tr", "http://timestamp.digicert.com", "/td", "SHA1", "ScreamRouterDesktop-${{ steps.commit.outputs.shortcode }}.msi" -NoNewWindow -Wait
        
        # Check if MSI was created and signed before trying to copy it
        if (Test-Path "ScreamRouterDesktop-${{ steps.commit.outputs.shortcode }}.msi") {
            # Copy the signed MSI to the root directory
            Copy-Item "ScreamRouterDesktop-${{ steps.commit.outputs.shortcode }}.msi" -Destination ../
        } else {
            echo "::error::MSI file was not created, check build logs"
            exit 1
        }
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.commit.outputs.shortcode }}
        name: Release ${{ steps.commit.outputs.shortcode }}
        files: |
          ScreamRouterDesktop-${{ steps.commit.outputs.shortcode }}.zip
          ScreamRouterDesktop-${{ steps.commit.outputs.shortcode }}.msi
        draft: false
        prerelease: false
        generate_release_notes: true
        token: ${{ secrets.GITHUB_TOKEN }}
